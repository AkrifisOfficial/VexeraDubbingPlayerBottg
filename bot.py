import os
import logging
import sys
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    ADMIN_CHAT_IDS = [int(id.strip()) for id in os.environ['ADMIN_CHAT_IDS'].split(',')]
    logger.info("Environment variables loaded successfully")
    logger.info(f"BOT_TOKEN: {BOT_TOKEN[:5]}...{BOT_TOKEN[-5:]}")
    logger.info(f"ADMIN_CHAT_IDS: {ADMIN_CHAT_IDS}")
except KeyError as e:
    logger.critical(f"Missing environment variable: {e}")
    sys.exit(1)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
applications = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_CHAT_IDS

async def admin_only(update: Update, context: ContextTypes.DEFAULT_TYPE, func) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã"""
    user_id = update.effective_user.id
    if not is_admin(user_id):
        logger.warning(f"Unauthorized access attempt by user: {user_id}")
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    await func(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"Command /start from user: {user.id}")
    
    if is_admin(user.id):
        response = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}!\n\n"
            "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/list - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
        )
    else:
        response = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–≠—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ VexeraDubbing.\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )
    
    await update.message.reply_text(response)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±–µ—Ä–Ω–µ–º –≤ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤
    await admin_only(update, context, _help_command)

async def _help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"Command /help from admin: {update.effective_user.id}")
    help_text = (
        "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "/review [ID] - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É\n"
        "/approve [ID] - –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É\n"
        "/reject [ID] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "–ó–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç —Å —Å–∞–π—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞!"
    )
    await update.message.reply_text(help_text)

async def handle_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("Received potential application message")
        
        if "–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í VEXERADUBBING" not in update.message.text:
            logger.debug("Message doesn't contain application marker, skipping")
            return
            
        logger.info("Processing new application...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏
        app_id = f"APP-{len(applications)+1:04d}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        applications[app_id] = {
            "status": "pending",
            "data": update.message.text,
            "telegram": next((line.split(': ')[1] for line in update.message.text.split('\n') if "Telegram" in line), "N/A")
        }
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{app_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
            ],
            [
                InlineKeyboardButton("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_{app_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_CHAT_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* `{app_id}`\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è_",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Notification sent to admin: {admin_id}")
            except Exception as e:
                logger.error(f"Failed to send notification to admin {admin_id}: {str(e)}")
        
        logger.info(f"New application processed: {app_id}")
        
    except Exception as e:
        logger.error(f"Error handling application: {str(e)}", exc_info=True)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not is_admin(query.from_user.id):
        logger.warning(f"Unauthorized button press by user: {query.from_user.id}")
        await query.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    try:
        action, app_id = query.data.split('_', 1)
        logger.info(f"Button action: {action} for application: {app_id}")
        
        if app_id not in applications:
            await query.edit_message_text(text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            logger.warning(f"Application not found: {app_id}")
            return
        
        app_data = applications[app_id]['data']
        
        if action == "view":
            await query.edit_message_text(
                text=f"üìÑ *–ó–∞—è–≤–∫–∞ {app_id}:*\n\n{app_data}",
                reply_markup=query.message.reply_markup,
                parse_mode='Markdown'
            )
            return
        
        if action == "approve":
            applications[app_id]['status'] = "approved"
            new_text = f"‚úÖ *–ó–∞—è–≤–∫–∞ –ü–†–ò–ù–Ø–¢–ê* `{app_id}`\n\n{app_data}"
        elif action == "reject":
            applications[app_id]['status'] = "rejected"
            new_text = f"‚ùå *–ó–∞—è–≤–∫–∞ –û–¢–ö–õ–û–ù–ï–ù–ê* `{app_id}`\n\n{app_data}"
        else:
            logger.warning(f"Unknown action: {action}")
            return
        
        await query.edit_message_text(
            text=new_text,
            parse_mode='Markdown'
        )
        logger.info(f"Application {app_id} {action}ed")
        
    except Exception as e:
        logger.error(f"Error in button handler: {str(e)}", exc_info=True)

async def list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±–µ—Ä–Ω–µ–º –≤ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤
    await admin_only(update, context, _list_applications)

async def _list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info(f"Command /list from admin: {update.effective_user.id}")
        
        if not applications:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫!")
            return
        
        response = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:*\n\n"
        for app_id, app in applications.items():
            status = {
                "pending": "üü° –û–∂–∏–¥–∞–µ—Ç",
                "approved": "üü¢ –ü—Ä–∏–Ω—è—Ç–∞",
                "rejected": "üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            }[app['status']]
            
            response += f"‚Ä¢ `{app_id}` - {status}\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"Error in list_applications: {str(e)}", exc_info=True)

def main():
    logger.info("===== Starting VexeraDubbing Bot =====")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("list", list_applications))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("Starting bot polling...")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"Failed to start bot: {str(e)}", exc_info=True)
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        import time
        time.sleep(30)
        main()

if __name__ == '__main__':
    main()
