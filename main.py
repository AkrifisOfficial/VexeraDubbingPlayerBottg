import os
import logging
import json
import time
from datetime import datetime
from flask import Flask, request, jsonify
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Dispatcher,
    CommandHandler,
    CallbackQueryHandler,
    CallbackContext
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_IDS = [int(id.strip()) for id in os.getenv("ADMIN_IDS", "").split(",") if id.strip()]
DB_FILE = "applications_db.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
PENDING_APPLICATIONS = {}
APPROVED_APPLICATIONS = {}
REJECTED_APPLICATIONS = {}
application_counter = 1

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot, None, workers=0)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    global PENDING_APPLICATIONS, APPROVED_APPLICATIONS, REJECTED_APPLICATIONS, application_counter
    
    try:
        if os.path.exists(DB_FILE):
            with open(DB_FILE, 'r') as f:
                data = json.load(f)
                PENDING_APPLICATIONS = data.get('pending', {})
                APPROVED_APPLICATIONS = data.get('approved', {})
                REJECTED_APPLICATIONS = data.get('rejected', {})
                application_counter = data.get('counter', 1)
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ë–î: {e}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def save_database():
    try:
        data = {
            'pending': PENDING_APPLICATIONS,
            'approved': APPROVED_APPLICATIONS,
            'rejected': REJECTED_APPLICATIONS,
            'counter': application_counter
        }
        with open(DB_FILE, 'w') as f:
            json.dump(data, f, indent=2)
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ë–î: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
def init_handlers():
    dispatcher.add_handler(CommandHandler("start", start_command))
    dispatcher.add_handler(CommandHandler("apps", show_applications))
    dispatcher.add_handler(CommandHandler("approved", show_approved))
    dispatcher.add_handler(CommandHandler("rejected", show_rejected))
    dispatcher.add_handler(CommandHandler("help", help_command))
    dispatcher.add_handler(CallbackQueryHandler(button_handler))
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
def application_keyboard(app_id):
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{app_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
        ],
        [
            InlineKeyboardButton("üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{app_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{app_id}")
        ]
    ])

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
def start_command(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id in ADMIN_IDS:
        update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä VexeraDubbing!\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/apps - –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏\n"
            "/approved - –û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
            "/rejected - –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
            "/help - –ü–æ–º–æ—â—å\n\n"
            "–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."
        )
    else:
        update.message.reply_text("‚ùå –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥—ã –æ–∑–≤—É—á–∫–∏.")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/apps - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏\n"
        "/approved - –ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "/rejected - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n\n"
        "–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:\n"
        "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å - –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É\n"
        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å - –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n"
        "üìù –ü–æ–¥—Ä–æ–±–Ω–µ–µ - –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏\n"
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
    )
    update.message.reply_text(help_text)

# –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
def show_applications(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫")
        return

    if not PENDING_APPLICATIONS:
        update.message.reply_text("‚ÑπÔ∏è –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫.")
        return

    for app_id in PENDING_APPLICATIONS:
        send_application_message(update, context, PENDING_APPLICATIONS[app_id])

# –ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
def show_approved(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫")
        return

    if not APPROVED_APPLICATIONS:
        update.message.reply_text("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    for app_id in APPROVED_APPLICATIONS:
        send_application_message(update, context, APPROVED_APPLICATIONS[app_id], approved=True)

# –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
def show_rejected(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫")
        return

    if not REJECTED_APPLICATIONS:
        update.message.reply_text("‚ÑπÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    for app_id in REJECTED_APPLICATIONS:
        send_application_message(update, context, REJECTED_APPLICATIONS[app_id], rejected=True)

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
def format_application(application, detailed=False):
    timestamp = datetime.fromtimestamp(application['timestamp']).strftime('%d.%m.%Y %H:%M')
    
    message = (
        f"üöÄ {'–û–¥–æ–±—Ä–µ–Ω–∞' if application.get('approved') else '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' if application.get('rejected') else '–ó–∞—è–≤–∫–∞'} "
        f"#{application['id']}\n"
        f"üìÖ {timestamp}\n\n"
        f"üë§ –ò–º—è: {application['name']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {application['contact']}\n"
        f"üé≠ –†–æ–ª—å: {application['role']}\n"
    )
    
    if detailed:
        message += (
            f"\nüíº –û–ø—ã—Ç:\n{application.get('experience', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"\nüîó –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç:\n{application.get('samples', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"\nüí¨ –ú–æ—Ç–∏–≤–∞—Ü–∏—è:\n{application['motivation']}\n"
        )
    
    if application.get('processed_by'):
        message += f"\nüë§ –û–±—Ä–∞–±–æ—Ç–∞–ª: {application['processed_by']}"
    
    if application.get('processed_time'):
        proc_time = datetime.fromtimestamp(application['processed_time']).strftime('%d.%m.%Y %H:%M')
        message += f"\n‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {proc_time}"
    
    return message

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—è–≤–∫–æ–π
def send_application_message(update, context, application, approved=False, rejected=False):
    message = format_application(application)
    
    keyboard = None
    if not approved and not rejected:
        keyboard = application_keyboard(application['id'])
    
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞—è–≤–∫–æ–π
def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()
    data = query.data.split("_")
    action = data[0]
    app_id = data[1]
    
    if query.from_user.id not in ADMIN_IDS:
        query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫")
        return

    application = None
    source = None
    
    # –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    if app_id in PENDING_APPLICATIONS:
        application = PENDING_APPLICATIONS[app_id]
        source = 'pending'
    elif app_id in APPROVED_APPLICATIONS:
        application = APPROVED_APPLICATIONS[app_id]
        source = 'approved'
    elif app_id in REJECTED_APPLICATIONS:
        application = REJECTED_APPLICATIONS[app_id]
        source = 'rejected'
    
    if not application:
        query.edit_message_text("‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    admin_name = query.from_user.first_name
    current_time = time.time()
    
    if action == "approve":
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞—è–≤–∫—É –≤ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ
        application['approved'] = True
        application['processed_by'] = admin_name
        application['processed_time'] = current_time
        
        if source == 'pending':
            del PENDING_APPLICATIONS[app_id]
        elif source == 'rejected':
            del REJECTED_APPLICATIONS[app_id]
        
        APPROVED_APPLICATIONS[app_id] = application
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_text = format_application(application, detailed=True)
        query.edit_message_text(
            text=new_text + "\n\n‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!",
            parse_mode='Markdown'
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∞–º
        notify_admins(f"üë§ {admin_name} –æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É #{app_id}")

    elif action == "reject":
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∑–∞—è–≤–∫—É –≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ
        application['rejected'] = True
        application['processed_by'] = admin_name
        application['processed_time'] = current_time
        
        if source == 'pending':
            del PENDING_APPLICATIONS[app_id]
        elif source == 'approved':
            del APPROVED_APPLICATIONS[app_id]
        
        REJECTED_APPLICATIONS[app_id] = application
        
        query.edit_message_text(
            text=f"‚ùå –ó–∞—è–≤–∫–∞ #{app_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
            parse_mode='Markdown'
        )
        notify_admins(f"üë§ {admin_name} –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É #{app_id}")

    elif action == "details":
        new_text = format_application(application, detailed=True)
        keyboard = None if application.get('approved') or application.get('rejected') else application_keyboard(app_id)
        
        query.edit_message_text(
            text=new_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif action == "delete":
        # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        if source == 'pending' and app_id in PENDING_APPLICATIONS:
            del PENDING_APPLICATIONS[app_id]
        elif source == 'approved' and app_id in APPROVED_APPLICATIONS:
            del APPROVED_APPLICATIONS[app_id]
        elif source == 'rejected' and app_id in REJECTED_APPLICATIONS:
            del REJECTED_APPLICATIONS[app_id]
        
        query.edit_message_text(
            text=f"üóëÔ∏è –ó–∞—è–≤–∫–∞ #{app_id} —É–¥–∞–ª–µ–Ω–∞",
            parse_mode='Markdown'
        )
        notify_admins(f"üë§ {admin_name} —É–¥–∞–ª–∏–ª –∑–∞—è–≤–∫—É #{app_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    save_database()

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
def notify_admins(message: str):
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode='Markdown'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ —Å —Å–∞–π—Ç–∞
@app.route('/submit', methods=['POST'])
def webhook_handler():
    global application_counter
    
    try:
        data = request.json
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['name', 'contact', 'role', 'motivation']
        for field in required_fields:
            if field not in data or not data[field].strip():
                return jsonify({
                    "status": "error",
                    "message": f"–ü–æ–ª–µ {field} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"
                }), 400
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        app_id = str(application_counter)
        application = {
            "id": app_id,
            "name": data['name'],
            "contact": data['contact'],
            "role": data['role'],
            "experience": data.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            "samples": data.get('samples', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'),
            "motivation": data['motivation'],
            "timestamp": time.time()
        }
        application_counter += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
        PENDING_APPLICATIONS[app_id] = application
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                bot.send_message(
                    chat_id=admin_id,
                    text=format_application(application),
                    reply_markup=application_keyboard(app_id),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ë–î
        save_database()
        
        return jsonify({
            "status": "success",
            "message": "–ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞",
            "application_id": app_id
        }), 200
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        return jsonify({
            "status": "error",
            "message": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        }), 500

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram
@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    update = Update.de_json(request.get_json(), bot)
    dispatcher.process_update(update)
    return 'ok', 200

# –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
@app.route('/')
def index():
    return jsonify({
        "status": "running",
        "service": "VexeraDubbing Application Bot",
        "version": "1.0",
        "pending_applications": len(PENDING_APPLICATIONS),
        "approved_applications": len(APPROVED_APPLICATIONS),
        "rejected_applications": len(REJECTED_APPLICATIONS)
    })

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
if __name__ == '__main__':
    # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    init_handlers()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    # bot.delete_webhook()
    # bot.set_webhook(url="https://your-render-url.onrender.com/telegram")
    
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port)
