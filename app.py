import os
import threading
import logging
import sys
from flask import Flask, request, jsonify
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    stream=sys.stdout  # –í–∞–∂–Ω–æ –¥–ª—è Render
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('8088128218:AAEZLKRnlKXpo8aPO2uEzQfk1Ik12ubDKrE')
ADMIN_CHAT_ID = os.environ.get('5847388657,7911072378,1884069432,6546229720,1110658250')
PORT = int(os.environ.get('PORT', 5000))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not BOT_TOKEN or not ADMIN_CHAT_ID:
    logger.error("CRITICAL ERROR: Missing required environment variables!")
    logger.info("Please set BOT_TOKEN and ADMIN_CHAT_ID in Render environment variables")
    # –í—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞—è–≤–æ–∫
applications = {}

# –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ VexeraDubbing.\n\n"
        "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/list - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üõ†Ô∏è –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "/list - –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "/review [ID] - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É\n"
        "/approve [ID] - –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É\n"
        "/reject [ID] - –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "–ó–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç—É–ø–∞—é—Ç —Å —Å–∞–π—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞!"
    )
    await update.message.reply_text(help_text)

async def handle_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if "–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í VEXERADUBBING" not in update.message.text:
            return
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –∑–∞—è–≤–∫–∏
        app_id = f"APP-{len(applications)+1:04d}"
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
        applications[app_id] = {
            "status": "pending",
            "data": update.message.text,
            "telegram": next((line.split(': ')[1] for line in update.message.text.split('\n') if "Telegram" in line), "N/A")
        }
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"approve_{app_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{app_id}")
            ],
            [
                InlineKeyboardButton("üëÄ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_{app_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì¨ *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞* `{app_id}`\n_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è_",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        logger.info(f"New application received: {app_id}")
        
    except Exception as e:
        logger.error(f"Error handling application: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    action, app_id = query.data.split('_', 1)
    
    if app_id not in applications:
        await query.edit_message_text(text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    app_data = applications[app_id]['data']
    
    if action == "view":
        await query.edit_message_text(
            text=f"üìÑ *–ó–∞—è–≤–∫–∞ {app_id}:*\n\n{app_data}",
            reply_markup=query.message.reply_markup,
            parse_mode='Markdown'
        )
        return
    
    if action == "approve":
        applications[app_id]['status'] = "approved"
        new_text = f"‚úÖ *–ó–∞—è–≤–∫–∞ –ü–†–ò–ù–Ø–¢–ê* `{app_id}`\n\n{app_data}"
    elif action == "reject":
        applications[app_id]['status'] = "rejected"
        new_text = f"‚ùå *–ó–∞—è–≤–∫–∞ –û–¢–ö–õ–û–ù–ï–ù–ê* `{app_id}`\n\n{app_data}"
    
    await query.edit_message_text(
        text=new_text,
        parse_mode='Markdown'
    )
    logger.info(f"Application {app_id} {action}ed")

async def list_applications(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not applications:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫!")
        return
    
    response = "üìã *–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:*\n\n"
    for app_id, app in applications.items():
        status = {
            "pending": "üü° –û–∂–∏–¥–∞–µ—Ç",
            "approved": "üü¢ –ü—Ä–∏–Ω—è—Ç–∞",
            "rejected": "üî¥ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        }[app['status']]
        
        response += f"‚Ä¢ `{app_id}` - {status}\n"
    
    await update.message.reply_text(response, parse_mode='Markdown')

def run_bot():
    logger.info("Starting Telegram bot...")
    logger.info(f"Using BOT_TOKEN: {BOT_TOKEN[:5]}...{BOT_TOKEN[-5:]}")
    logger.info(f"Using ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = ApplicationBuilder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("list", list_applications))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_application))
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("VexeraDubbing Bot is running!")
        application.run_polling()
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
        threading.Timer(30.0, run_bot).start()

@app.route('/')
def home():
    return "VexeraDubbing Telegram Bot is running!"

@app.route('/health')
def health_check():
    return jsonify({
        "status": "running",
        "bot": "active" if hasattr(app, 'bot_running') else "inactive",
        "applications_count": len(applications)
    }), 200

@app.route('/env-check')
def env_check():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    return jsonify({
        "BOT_TOKEN_exists": bool(BOT_TOKEN),
        "ADMIN_CHAT_ID_exists": bool(ADMIN_CHAT_ID),
        "PORT": PORT
    }), 200

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    app.bot_running = True
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    logger.info(f"Starting Flask server on port {PORT}")
    app.run(host='0.0.0.0', port=PORT)
